//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: arena.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_json.h"

#include "arena.h"

#include "arena_common_json.h"

namespace FBE {

namespace JSON {

template <class TWriter>
struct ValueWriter<TWriter, ::arena::Item>
{
    static bool to_json(TWriter& writer, const ::arena::Item& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "optr") || !FBE::JSON::to_json(writer, value.optr, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "alias") || !FBE::JSON::to_json(writer, value.alias, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "expressions") || !FBE::JSON::to_json(writer, value.expressions, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "aliases_int") || !FBE::JSON::to_json(writer, value.aliases_int, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::arena::Item>
{
    static bool from_json(const TJson& json, ::arena::Item& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.optr, "optr");
        result &= FBE::JSON::from_json(json, value.alias, "alias");
        result &= FBE::JSON::from_json(json, value.expressions, "expressions");
        result &= FBE::JSON::from_json(json, value.aliases_int, "aliases_int");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::arena::Item2>
{
    static bool to_json(TWriter& writer, const ::arena::Item2& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "bytes_v") || !FBE::JSON::to_json(writer, value.bytes_v, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::arena::Item2>
{
    static bool from_json(const TJson& json, ::arena::Item2& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.bytes_v, "bytes_v");
        return result;
    }
};

} // namespace JSON

} // namespace FBE
